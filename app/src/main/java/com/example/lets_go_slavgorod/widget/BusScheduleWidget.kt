package com.example.lets_go_slavgorod.widget

import android.app.PendingIntent
import android.appwidget.AppWidgetManager
import android.appwidget.AppWidgetProvider
import android.content.Context
import android.content.Intent
import android.widget.RemoteViews
import com.example.lets_go_slavgorod.MainActivity
import com.example.lets_go_slavgorod.R
import com.example.lets_go_slavgorod.data.local.AppDatabase
import com.example.lets_go_slavgorod.data.repository.BusRouteRepository
import com.example.lets_go_slavgorod.utils.TimeUtils
import com.example.lets_go_slavgorod.utils.toFavoriteTime
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.SupervisorJob
import kotlinx.coroutines.flow.first
import kotlinx.coroutines.launch
import timber.log.Timber
import java.text.SimpleDateFormat
import java.util.*

/**
 * –í–∏–¥–∂–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∞–≤—Ç–æ–±—É—Å–æ–≤ –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω
 * 
 * –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –±–ª–∏–∂–∞–π—à–∏–µ —Ä–µ–π—Å—ã –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä—è–º–æ –Ω–∞ –≥–ª–∞–≤–Ω–æ–º —ç–∫—Ä–∞–Ω–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞.
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç –∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ.
 * 
 * –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
 * - –ü–æ–∫–∞–∑ –¥–æ 5 –±–ª–∏–∂–∞–π—à–∏—Ö —Ä–µ–π—Å–æ–≤
 * - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
 * - –ö–ª–∏–∫ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 * - –ö–æ–º–ø–∞–∫—Ç–Ω—ã–π –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π –¥–∏–∑–∞–π–Ω
 * 
 * @author VseMirka200
 * @version 1.0
 */
class BusScheduleWidget : AppWidgetProvider() {
    
    private val scope = CoroutineScope(SupervisorJob() + Dispatchers.Default)
    
    override fun onUpdate(
        context: Context,
        appWidgetManager: AppWidgetManager,
        appWidgetIds: IntArray
    ) {
        Timber.d("Widget onUpdate called for ${appWidgetIds.size} widgets")
        
        for (appWidgetId in appWidgetIds) {
            updateAppWidget(context, appWidgetManager, appWidgetId)
        }
    }
    
    override fun onEnabled(context: Context) {
        Timber.d("Widget enabled")
    }
    
    override fun onDisabled(context: Context) {
        Timber.d("Widget disabled")
    }
    
    private fun updateAppWidget(
        context: Context,
        appWidgetManager: AppWidgetManager,
        appWidgetId: Int
    ) {
        scope.launch {
            try {
                val views = RemoteViews(context.packageName, R.layout.widget_bus_schedule)
                
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                val currentTime = SimpleDateFormat("HH:mm", Locale.getDefault()).format(Date())
                views.setTextViewText(R.id.widget_title, "–ü–æ–µ—Ö–∞–ª–∏! –°–ª–∞–≤–≥–æ—Ä–æ–¥")
                views.setTextViewText(R.id.widget_update_time, "–û–±–Ω–æ–≤–ª–µ–Ω–æ: $currentTime")
                
                // –ü–æ–ª—É—á–∞–µ–º –∏–∑–±—Ä–∞–Ω–Ω—ã–µ —Ä–µ–π—Å—ã
                val database = AppDatabase.getDatabase(context)
                val repository = BusRouteRepository(context)
                val favoritesEntities = database.favoriteTimeDao().getAllFavoriteTimes().first()
                
                if (favoritesEntities.isEmpty()) {
                    views.setTextViewText(R.id.widget_content, "–ù–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ä–µ–π—Å–æ–≤\n\n–î–æ–±–∞–≤—å—Ç–µ —Ä–µ–π—Å—ã –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏")
                } else {
                    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ FavoriteTime –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ
                    val favorites = favoritesEntities
                        .map { it.toFavoriteTime(repository) }
                        .filter { it.isActive }
                    
                    if (favorites.isEmpty()) {
                        views.setTextViewText(R.id.widget_content, "–í—Å–µ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ —Ä–µ–π—Å—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã")
                    } else {
                        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                        val upcomingFavorites = favorites
                            .mapNotNull { favorite ->
                                val minutesUntil = TimeUtils.getTimeUntilDeparture(favorite.departureTime)
                                if (minutesUntil != null && minutesUntil >= 0) {
                                    favorite to minutesUntil
                                } else {
                                    null
                                }
                            }
                            .sortedBy { it.second }
                            .take(5) // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ 5 –±–ª–∏–∂–∞–π—à–∏—Ö
                        
                        if (upcomingFavorites.isEmpty()) {
                            views.setTextViewText(R.id.widget_content, "–ù–µ—Ç –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —Ä–µ–π—Å–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è")
                        } else {
                            // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –≤–∏–¥–∂–µ—Ç–∞
                            val contentText = upcomingFavorites.joinToString("\n\n") { (favorite, minutes) ->
                                val timeFormatted = when {
                                    minutes < 1 -> "–æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Å–µ–π—á–∞—Å"
                                    minutes == 1 -> "—á–µ—Ä–µ–∑ 1 –º–∏–Ω—É—Ç—É"
                                    minutes < 5 -> "—á–µ—Ä–µ–∑ $minutes –º–∏–Ω—É—Ç—ã"
                                    minutes < 60 -> "—á–µ—Ä–µ–∑ $minutes –º–∏–Ω—É—Ç"
                                    else -> "–±–æ–ª–µ–µ —á–∞—Å–∞"
                                }
                                "üöå ${favorite.routeNumber} - ${favorite.stopName}\n" +
                                "‚è∞ ${favorite.departureTime} ($timeFormatted)"
                            }
                            views.setTextViewText(R.id.widget_content, contentText)
                        }
                    }
                }
                
                // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–ª–∏–∫ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
                val intent = Intent(context, MainActivity::class.java).apply {
                    flags = Intent.FLAG_ACTIVITY_NEW_TASK or Intent.FLAG_ACTIVITY_CLEAR_TOP
                }
                val pendingIntent = PendingIntent.getActivity(
                    context,
                    0,
                    intent,
                    PendingIntent.FLAG_UPDATE_CURRENT or PendingIntent.FLAG_IMMUTABLE
                )
                views.setOnClickPendingIntent(R.id.widget_container, pendingIntent)
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–¥–∂–µ—Ç
                appWidgetManager.updateAppWidget(appWidgetId, views)
                Timber.d("Widget $appWidgetId updated successfully")
                
            } catch (e: Exception) {
                Timber.e(e, "Error updating widget $appWidgetId")
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –≤ –≤–∏–¥–∂–µ—Ç–µ
                val views = RemoteViews(context.packageName, R.layout.widget_bus_schedule)
                views.setTextViewText(R.id.widget_title, "–ü–æ–µ—Ö–∞–ª–∏! –°–ª–∞–≤–≥–æ—Ä–æ–¥")
                views.setTextViewText(R.id.widget_content, "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö\n–ü–æ—Ç—è–Ω–∏—Ç–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
                appWidgetManager.updateAppWidget(appWidgetId, views)
            }
        }
    }
}

